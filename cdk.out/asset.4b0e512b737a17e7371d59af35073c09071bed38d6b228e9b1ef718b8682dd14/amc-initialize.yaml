AWSTemplateFormatVersion: 2010-09-09
Description:
  "The following template creates an S3 Bucket and S3 Bucket policy with prescribed parameter values
  to enable cross account write access for the parameterized AWS account."

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Initialization Values"
        Parameters:
          - pBucketName
          - pCrossAccountAccessAccountId

    ParameterLabels:
      pBucketName:
        default: "[DO NOT MODIFY] Name of S3 bucket to create."
      pCrossAccountAccessAccountId:
        default: "[DO NOT MODIFY] AWS Account ID of the account given PutObject permissions to the bucket."

Parameters:
  pBucketName:
    Type: String
    Description: Creates the S3 Bucket with the specified name
  pCrossAccountAccessAccountId:
    Type: String
    Description: The AWS account ID that is given PutObject access to the S3 bucket created in the template
  pLambdaRoleArn:
    Type: String
    Description: The lambda service role that creates this stack, it is needed to maintain the KMS key
  pTenantName:
    Type: String
  pResourcePrefix:
    Type: String
  pBucketExists:
    Type: String
    Description: Check if the S3 bucket already exists and deploy only if False
    AllowedValues:
      - "True"
      - "False"
    Default: "False"

Conditions:
  DeployBucket: !Equals
    - !Ref pBucketExists
    - "False"

Resources:
  rS3Bucket:
    Condition: DeployBucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref pBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID: !GetAtt rS3EncryptionKey.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref pBucketName
      PolicyDocument:
        Version: "2012-10-17"
        Id: BucketDeliveryPolicy
        Statement:
          - Sid: BucketDelivery
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${pCrossAccountAccessAccountId}:root
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: !Sub arn:aws:s3:::${pBucketName}/*
          - Sid: BucketOwnerAccess
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${pBucketName}/*
              - !Sub arn:aws:s3:::${pBucketName}

  rS3EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: String
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-consolepolicy-3
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: kms:*
            Resource: "*"
          - Sid: Enable IAM Cross Account Permissions
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${pCrossAccountAccessAccountId}:root"
            Action:
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Condition:
              StringEquals:
                "kms:ViaService": !Sub "s3.${AWS::Region}.amazonaws.com"
            Resource: "*"
          - Sid: Enable AddAMCInstance service to Modify
            Effect: Allow
            Principal:
              AWS: !Ref pLambdaRoleArn
            Action:
              - kms:CreateKey
              - kms:TagResource
              - kms:CreateAlias
              - kms:UpdateAlias
              - kms:DescribeKey
              - kms:PutKeyPolicy
              - kms:ScheduleKeyDeletion
            Resource: "*"

  rS3EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        Fn::Sub: alias/tps-${pTenantName}-kms-s3-encryption-key
      TargetKeyId: !Ref rS3EncryptionKey

  ####### CLOUD WATCH RULES ######
  rRuleExecuteDataLakeProcess:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger Data Lake Process"
      State: "ENABLED"
      EventPattern:
        source:
          - aws.s3
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
            - CompleteMultipartUpload
            - DeleteObject
          requestParameters:
            bucketName:
              - !Ref pBucketName
      Targets:
        - Arn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pResourcePrefix}-data-lake-routing"
          Id: "DataLakeRoutingLambdaTrigger"

  PermissionForRuleExecuteWorkflowExecutionQueueConsumer:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pResourcePrefix}-data-lake-routing"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt rRuleExecuteDataLakeProcess.Arn

Outputs:
  oBucketName:
    Value: !Sub ${pBucketName}
    Export:
      Name: !Sub ${AWS::StackName}-bucket
  oS3EncryptionKeyAlias:
    Value: !Ref rS3EncryptionKeyAlias
  oS3EncryptionKey:
    Value: !Ref rS3EncryptionKey
